<div class="top-test-page">
  <div class="container">
    <div class="row">
      <div class="col-sm-8 col-sm-offset-2">
        <div class="logo-wrapper">
          <%= image_tag "logo-black.png" %>
        </div>

        <div class="box">
          <div class="box-header <%= @test.errors.any? ? "error": "info" %>">PRUEBA TÉCNICA</div>
          <div class="box-body">
            <p style="line-height: 1.6;">¡Muy bien! La prueba técnica se compone de 3 ejercicios. Tienes hasta una semana después de que se cierren las aplicaciones al programa para entregarla.</p>
            <p><strong>Nota:</strong> Para volver a esta página puedes utilizar el vínculo que te llegó en el correo.</p>

            <%= form_for @test, url: top_program_test_path do |f| %>
              <%= hidden_field_tag :applicant_id, @test.applicant.id %>

              <% if @test.version == 1 %>
                <%= render "v1", f: f %>
              <% else %>
                <%= render "v2", f: f %>
              <% end %>

              <div class="actions text-right">
                <button type="submit" class="btn btn-primary" name="button">Enviar</button>
              </div>
            <% end %>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  var questions = [
    {
      name: "Calcular impuestos",
      description: {
        default: "Escribe una función llamada <code>calcularImpuestos</code> que reciba dos argumentos numéricos: <code>edad</code> e <code>ingresos</code>. Si <code>edad</code> es igual o mayor a 18 y los ingresos son iguales o mayores a 1000 debe retornar <code>ingresos</code> * 40%. De lo contrario retorna 0.",
        java: "Escribe una clase <code>Main</code> con un método llamado <code>calcularImpuestos</code> que reciba dos argumentos numéricos: <code>edad</code> e <code>ingresos</code>. Si <code>edad</code> es igual o mayor a 18 y los ingresos son iguales o mayores a 1000 debe retornar <code>ingresos</code> * 40%. De lo contrario retorna 0.",
        csharp: "Escribe una clase <code>Main</code> con un método llamado <code>CalcularImpuestos</code> que reciba dos argumentos numéricos: <code>edad</code> e <code>ingresos</code>. Si <code>edad</code> es igual o mayor a 18 y los ingresos son iguales o mayores a 1000 debe retornar <code>ingresos</code> * 40%. De lo contrario retorna 0.",
        ruby: "Escribe una función llamada <code>calcular_impuestos</code> que reciba dos argumentos numéricos: <code>edad</code> e <code>ingresos</code>. Si <code>edad</code> es igual o mayor a 18 y los ingresos son iguales o mayores a 1000 debe retornar <code>ingresos</code> * 40%. De lo contrario retorna 0.",
        python: "Escribe una función llamada <code>calcular_impuestos</code> que reciba dos argumentos numéricos: <code>edad</code> e <code>ingresos</code>. Si <code>edad</code> es igual o mayor a 18 y los ingresos son iguales o mayores a 1000 debe retornar <code>ingresos</code> * 40%. De lo contrario retorna 0."
      },
      examples: {
        javascript: `calcularImpuestos(18, 1000) // retorna 400
calcularImpuestos(40, 10000) // retorna 4000
calcularImpuestos(17, 5000) // retorna 0`,
        ruby: `calcular_impuestos(18, 1000) # retorna 400
calcular_impuestos(40, 10000) # retorna 4000
calcular_impuestos(17, 5000) # retorna 0`,
        python: `calcular_impuestos(18, 1000) # retorna 400
calcular_impuestos(40, 10000) # retorna 4000
calcular_impuestos(17, 5000) # retorna 0`,
        java: `Main main = new Main();
main.calcularImpuestos(18, 1000); // retorna 400
main.calcularImpuestos(40, 10000); // retorna 4000
main.calcularImpuestos(17, 5000); // retorna 0`,
        csharp: `Main main = new Main();
main.CalcularImpuestos(18, 1000); // retorna 400
main.CalcularImpuestos(40, 10000); // retorna 4000
main.CalcularImpuestos(17, 5000); // retorna 0`,
        cplus: `calcularImpuestos(18, 1000); // retorna 400
calcularImpuestos(40, 10000); // retorna 4000
calcularImpuestos(17, 5000); // retorna 0`,
        php: `calcularImpuestos(18, 1000); // retorna 400
calcularImpuestos(40, 10000); // retorna 4000
calcularImpuestos(17, 5000); // retorna 0`
      }
    },
    {
      name: "Cuenta los asteriscos",
      description: {
        default: "Escribe una función llamada <code>asteriscos</code> que reciba un string <code>str</code> y retorne el número de asteriscos que hay en <code>str</code>.",
        java: "Escribe una clase `Main` con un método llamado <code>asteriscos</code> que reciba un string <code>str</code> y retorne el número de asteriscos que hay en <code>str</code>.",
        csharp: "Escribe una clase `Main` con un método llamado <code>Asteriscos</code> que reciba un string <code>str</code> y retorne el número de asteriscos que hay en <code>str</code>."
      },
      examples: {
        javascript: `asteriscos("H*o*l*a") // retorna 3
asteriscos("Hola")  // retorna 0`,
        ruby: `asteriscos("H*o*l*a") # retorna 3
asteriscos("Hola") # retorna 0`,
        python: `asteriscos("H*o*l*a") # retorna 3
asteriscos("Hola") # retorna 0`,
        java: `Main main = new Main();
main.asteriscos("H*o*l*a"); // retorna 3
main.asteriscos("Hola"); // retorna 0`,
        csharp: `Main main = new Main();
main.Asteriscos("H*o*l*a"); // retorna 3
main.Asteriscos("Hola"); // retorna 0`,
        cplus: `asteriscos("H*o*l*a"); // retorna 3
asteriscos("Hola"); // retorna 0`,
        php: `asteriscos("H*o*l*a"); // retorna 3
asteriscos("Hola"); // retorna 0`
      }
    },
    {
      name: "Duplica cada elemento",
      description: {
        default: "Escribe una función llamada <code>duplicar</code> que reciba un arreglo de números como parámetro y retorne un nuevo arreglo con cada elemento duplicado (multiplicado por dos).",
        java: "Escribe una clase `Main` con un método llamado <code>duplicar</code> que reciba un arreglo de números como parámetro y retorne un nuevo arreglo con cada elemento duplicado (multiplicado por dos).",
        csharp: "Escribe una clase `Main` con un método llamado <code>Duplicar</code> que reciba un arreglo de números como parámetro y retorne un nuevo arreglo con cada elemento duplicado (multiplicado por dos)."
      },
      examples: {
        javascript: `duplicar([3, 12, 45, 7]) // retorna [6, 24, 90, 14]
duplicar([8, 5]) // retorna [16, 10]`,
        ruby: `duplicar([3, 12, 45, 7]) # retorna [6, 24, 90, 14]
duplicar([8, 5]) # retorna [16, 10]`,
        python: `duplicar([3, 12, 45, 7]) # retorna [6, 24, 90, 14]
duplicar([8, 5]) # retorna [16, 10]`,
        java: `Main main = new Main();
main.duplicar(new int[]{ 3, 12, 45, 7 }); // retorna [6, 24, 90, 14]
main.duplicar(new int[]{ 8, 5 }); // retorna [16, 10]`,
        csharp: `Main main = new Main();
main.Duplicar(new int[] { 3, 12, 45, 7 }); // retorna [6, 24, 90, 14]
main.Duplicar(new int[] { 8, 5 }); // retorna [16, 10]`,
        cplus: `duplicar([3, 12, 45, 7]); // retorna [6, 24, 90, 14]
duplicar([8, 5]); // retorna [16, 10]`,
        php: `duplicar([3, 12, 45, 7]); // retorna [6, 24, 90, 14]
duplicar([8, 5]); // retorna [16, 10]`
      }
    }
  ]

  $(document).on("turbolinks:load", function() {
    window.topProgramTestView = new TopProgramTestView(questions, <%= @test.version %>);
  });
</script>
